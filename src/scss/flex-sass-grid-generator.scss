@charset "UTF-8";

/*
* VARIABLES
*/
/// @group variables

$base-font-size:              16;
$grid-columns:                12 !default;
$grid-gutter-width:           1.875rem !default; // 30px

/*
  Breakpoints variables Sass map
  ==============================

  Provided variables for media-query breakpoints array
*/
$grid-breakpoints: (
        xs:                   0,
        sm:                   540px,
        md:                   980px,
        lg:                   1024px,
        xl:                   1280px,
        xxl:                  1900px
) !default;

/*
  Grid containers
  ===============

  Define the maximum width of `.container` for different screen sizes.
*/
$container-max-widths: (
        sm: 480px,
        md: 768px,
        lg: 992px,
        xl: 1200px,
        xxl: 1890px
) !default;

$container-min-width: 320px;


/*
* BREAKPOINTS MIXINS
*/

// Name of the next breakpoint, or null for the last breakpoint.
//
//    >> breakpoint-next(sm)
//    md
//    >> breakpoint-next(sm, (xs: 0, sm: 544px, md: 768px))
//    md
//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md))
//    md
@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {
  $n: index($breakpoint-names, $name);
  @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);
}


// Minimum breakpoint width. Null for the smallest (first) breakpoint.
//
//    >> breakpoint-min(sm, (xs: 0, sm: 544px, md: 768px))
//    544px
@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {
  $min: map-get($breakpoints, $name);
  @return if($min != 0, $min, null);
}


// Maximum breakpoint width. Null for the largest (last) breakpoint.
// The maximum value is calculated as the minimum of the next one less 0.1.
//
//    >> breakpoint-max(sm, (xs: 0, sm: 544px, md: 768px))
//    767px
@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {
  $next: breakpoint-next($name, $breakpoints);
  @return if($next, breakpoint-min($next, $breakpoints) - 1px, null);
}

// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.
// Makes the @content apply to the given breakpoint and wider.
@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {
  $min: breakpoint-min($name, $breakpoints);
  @if $min {
    @media (min-width: $min) {
      @content;
    }
  } @else {
    @content;
  }
}

// Media of at most the maximum breakpoint width. No query for the largest breakpoint.
// Makes the @content apply to the given breakpoint and narrower.
@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {
  $max: breakpoint-max($name, $breakpoints);
  @if $max {
    @media (max-width: $max) {
      @content;
    }
  } @else {
    @content;
  }
}


// Media between the breakpoint's minimum and maximum widths.
// No minimum for the smallest breakpoint, and no maximum for the largest one.
// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.
@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {
  @include media-breakpoint-up($name, $breakpoints) {
    @include media-breakpoint-down($name, $breakpoints) {
      @content;
    }
  }
}

// Media that spans multiple breakpoint widths.
// Makes the @content apply between the min and max breakpoints
@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {
  @include media-breakpoint-up($lower, $breakpoints) {
    @include media-breakpoint-down($upper, $breakpoints) {
      @content;
    }
  }
}


/*
* GRID MIXINS
*/

@mixin make-container($gutter: $grid-gutter-width) {
  max-width: 100%;
  width: 100%;
  min-width: $container-min-width;
  margin-left: auto;
  margin-right: auto;
  box-sizing: border-box;
  padding-left:  ($gutter / 2);
  padding-right: ($gutter / 2);
}

// For each breakpoint, define the maximum width of the container in a media query
@mixin make-container-max-widths($max-widths: $container-max-widths) {
  @each $breakpoint, $container-max-width in $max-widths {
    @include media-breakpoint-up($breakpoint) {
      max-width: $container-max-width;
    }
  }
}

@mixin make-row($gutter: $grid-gutter-width) {
  display: flex;
  flex-wrap: wrap;
  margin-left:  ($gutter / -2);
  margin-right: ($gutter / -2);
}



// Framework grid generation
//
// Used only by Bootstrap to generate the correct number of grid classes given
// any value of `$grid-columns`.

@mixin make-col-span($size, $columns: $grid-columns) {
  flex: 0 0 percentage($size / $columns);
  // Add a `max-width` to ensure content within each column does not blow out
  // the width of the column. Applies to IE10+ and Firefox. Chrome and Safari
  // do not appear to require this.
  max-width: percentage($size / $columns);
  box-sizing: border-box;
}

@mixin make-col-offset($size, $columns: $grid-columns) {
  margin-left: percentage($size / $columns);
}

@mixin make-col-push($size, $columns: $grid-columns) {
  left: if($size > 0, percentage($size / $columns), auto);
}

@mixin make-col-pull($size, $columns: $grid-columns) {
  right: if($size > 0, percentage($size / $columns), auto);
}

@mixin make-col-modifier($type, $size, $columns) {
  // Work around the lack of dynamic mixin @include support (https://github.com/sass/sass/issues/626)
  @if $type == push {
    @include make-col-push($size, $columns);
  } @else if $type == pull {
    @include make-col-pull($size, $columns);
  } @else if $type == offset {
    @include make-col-offset($size, $columns);
  }
}

@mixin make-grid-columns($columns: $grid-columns, $gutter: $grid-gutter-width, $breakpoints: $grid-breakpoints) {
  // Common properties for all breakpoints
  %grid-column {
    position: relative;
    // Prevent columns from collapsing when empty
    min-height: 1px;
    // Inner gutter via padding
    padding-left: ($gutter / 2);
    padding-right: ($gutter / 2);
  }
  $breakpoint-counter: 0;
  @each $breakpoint in map-keys($breakpoints) {
    $breakpoint-counter: ($breakpoint-counter + 1);
    @for $i from 1 through $columns {
      .col-#{$breakpoint}-#{$i} {
        @extend %grid-column;
      }
    }

    @include media-breakpoint-up($breakpoint) {
      // Work around cross-media @extend (https://github.com/sass/sass/issues/1050)
      @for $i from 1 through $columns {
        .col-#{$breakpoint}-#{$i} {
          @include make-col-span($i, $columns);
        }
      }
      @each $modifier in (pull, push) {
        @for $i from 0 through $columns {
          .col-#{$breakpoint}-#{$modifier}-#{$i} {
            @include make-col-modifier($modifier, $i, $columns)
          }
        }
      }
      // `$columns - 1` because offsetting by the width of an entire row isn't possible
      @for $i from 0 through ($columns - 1) {
        @if $breakpoint-counter != 1 or $i != 0 { // Avoid emitting useless .col-xs-offset-0
          .col-#{$breakpoint}-offset-#{$i} {
            @include make-col-modifier(offset, $i, $columns)
          }
        }
      }
    }
  }
}

/*
* Responsive visibility utilities
*/

@each $bp in map-keys($grid-breakpoints) {
  ._#{$bp}-hidden-up {
    @include media-breakpoint-up($bp) {
      display: none !important;
    }
  }
  ._#{$bp}-hidden-down {
    @include media-breakpoint-down($bp) {
      display: none !important;
    }
  }
}

html{
  font-size: $base-font-size + px;
}

/*
* GENERATE GRID
*/

// Generate container classes
.container{
  @include make-container();
  @include make-container-max-widths();

  &.-fluid{
    @include make-container();
  }
}

// Generate row classes
.row{
  @include make-row();

  // Alignment for every column in row
  @each $breakpoint in map-keys($grid-breakpoints) {
    @include media-breakpoint-up($breakpoint) {
      &.-#{$breakpoint}-top    { align-items: flex-start; }
      &.-#{$breakpoint}-center { align-items: center; }
      &.-#{$breakpoint}-bottom { align-items: flex-end; }
      &.-#{$breakpoint}-stretch { align-items: stretch; }
      &.-#{$breakpoint}-baseline { align-items: baseline; }
      &.-#{$breakpoint}-nowrap { flex-wrap: nowrap}
    }
  }
}

// Generate columns classes
.column{
  position: relative;
  // Prevent columns from collapsing when empty
  min-height: 1px;
  // Inner gutter via padding
  padding-left: ($grid-gutter-width / 2);
  padding-right: ($grid-gutter-width / 2);
  box-sizing: border-box;

  $breakpoint-counter: 0;
  @each $breakpoint in map-keys($grid-breakpoints) {
    $breakpoint-counter: ($breakpoint-counter + 1);
    @include media-breakpoint-up($breakpoint) {
      // Work around cross-media @extend (https://github.com/sass/sass/issues/1050)
      @for $i from 1 through $grid-columns {
        &.-#{$breakpoint}-#{$i} {
          @include make-col-span($i, $grid-columns);
        }
      }
      @each $modifier in (pull, push) {
        @for $i from 0 through $grid-columns {
          &.-#{$breakpoint}-#{$modifier}-#{$i} {
            @include make-col-modifier($modifier, $i, $grid-columns)
          }
        }
      }
      // `$columns - 1` because offsetting by the width of an entire row isn't possible
      @for $i from 0 through ($grid-columns - 1) {
        @if $breakpoint-counter != 1 or $i != 0 { // Avoid emitting useless .col-xs-offset-0
          &.-#{$breakpoint}-offset-#{$i} {
            @include make-col-modifier(offset, $i, $grid-columns)
          }
        }
      }
    }
  }

  // Column ordering
  @each $breakpoint in map-keys($grid-breakpoints) {
    @include media-breakpoint-up($breakpoint) {
      &.-#{$breakpoint}-first { order: -1; }
      &.-#{$breakpoint}-last  { order: 1; }
    }
  }

  // Alignment per column
  @each $breakpoint in map-keys($grid-breakpoints) {
    @include media-breakpoint-up($breakpoint) {
      &.-#{$breakpoint}-top    { align-self: flex-start; }
      &.-#{$breakpoint}-center { align-self: center; }
      &.-#{$breakpoint}-bottom { align-self: flex-end; }
      &.-#{$breakpoint}-baseline { align-self: baseline; }
      &.-#{$breakpoint}-stretch { align-self: stretch; }
    }
  }
}




